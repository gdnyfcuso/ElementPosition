# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'i:\Python\git\元素定位\CutFullScreenImage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow,QMenu
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from CutImageLabel import CutImageLabel
import pictureElementPosigioning 
from showimagelabel import showimageposition
import cv2
import threading
import time 



class Ui_MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.cut=False
        self.setObjectName("MainWindow")      
        desktop = QApplication.desktop()
        self.resize(desktop.width(), desktop.height())
        
        self.desktop=desktop      

        if not self.objectName():        
            self.setObjectName(u"MainWindow")
        self.setWindowModality(Qt.ApplicationModal)
        self.setEnabled(True)
        self.setGeometry(0,0,desktop.width(), desktop.height())
        self.setMouseTracking(False)
        self.setLayoutDirection(Qt.RightToLeft)
        self.setAnimated(False)
        self.setDocumentMode(False)
        self.setDockNestingEnabled(False)
        self.setDockOptions(QMainWindow.AllowTabbedDocks)
        
        self.centralwidget = QWidget(self)
        self.centralwidget.setObjectName(u"centralwidget")
        self.label = CutImageLabel(self.centralwidget)
        self.label.setObjectName(u"label")

        self.label.setScaledContents(True)

        self.cutlabel = QtWidgets.QLabel(self.centralwidget)
        self.cutlabel.setText("")
        self.cutlabel.setTextFormat(QtCore.Qt.RichText)
        self.cutlabel.setObjectName("cutlabel")

        self.showarealabel = showimageposition(self.centralwidget)
        self.showarealabel.setText("")
        self.showarealabel.setTextFormat(QtCore.Qt.RichText)
        self.showarealabel.setObjectName("showarealabel")

        self.setCentralWidget(self.centralwidget)
        self.retranslateUi(self)
        
        self.MainWindow=self

        self.createContextMenu()

        self.label.setContextMenuPolicy(Qt.CustomContextMenu)
        self.label.customContextMenuRequested['QPoint'].connect(self.mymenu)
        
        QShortcut(QKeySequence(self.tr("Ctrl+Q")), self, self.cutfullimage)
        QShortcut(QKeySequence(self.tr("Ctrl+W")), self, self.hideLabel)
        QShortcut(QKeySequence(self.tr("ctrl+E")),self,self.showPositonArea)
        QShortcut(QKeySequence(self.tr("ESC")), self, self.close)                       

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        self.label.setText("")
    def cutfullimage(self):
        '''
        全屏截图 ctrl+Q
        '''        
        self.hideLabel()
        self.hide()
        simagename='/home/lixingzhou/下载/元素定位/aa.png'
        iscurrentscreen=True
        if iscurrentscreen:
            self.window_capture(simagename)
        else:
            self.loadcurrentimage(simagename)
    
    def window_capture(self,filename):        
        mythread=threading.Thread(target=self.window_capture_core,args=(self,filename))
        mythread.start()

    def loadcurrentimage(self,filename):
        img = cv2.imread(filename)

        height, width, bytesPerComponent = img.shape

        bytesPerLine = 3 * width

        cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)

        QImg = QImage(img.data, width, height, bytesPerLine,QImage.Format_RGB888)

        img = QPixmap.fromImage(QImg)                   
            
        #Update label image object
        self.label.img=img
        self.label.setGeometry(QRect(0, 0, self.desktop.width(), self.desktop.height()))
        self.label.setPixmap(img)        
        # 无边框
        self.setWindowFlags(Qt.FramelessWindowHint)                      
        #全屏显示
        self.MainWindow.showFullScreen()
        self.label.showFullScreen()   #全屏显


    @staticmethod
    def window_capture_core(myself,filename):
        time.sleep(0.5)
        screenshot = QApplication.primaryScreen().grabWindow(QApplication.desktop().winId())    
        outputRegion = screenshot.copy()
        outputRegion.save(filename, format = 'bmp', quality = 100)
        myself.loadcurrentimage(filename)

        
    def hideLabel(self):
        self.label.hide()
        self.showarealabel.hide()
        self.cutlabel.hide()

    def mymenu(self,event):
        cmenu=QMenu(self.label)
        newAct = cmenu.addAction("New")
        opnAct = cmenu.addAction("Open")
        quitAct = cmenu.addAction("Quit")
        # action = cmenu.exec_(self.label.mapToGlobal(event.pos()))
        # if action == quitAct:
        #     print("触发退出成功")
    def createContextMenu(self):
            # 必须将ContextMenuPolicy设置为Qt.CustomContextMenu 
            # 否则无法使用customContextMenuRequested信号 
            self.label.setContextMenuPolicy(Qt.CustomContextMenu) 
            self.label.customContextMenuRequested.connect(self.showContextMenu) 
            # 创建QMenu 
            self.contextMenu = QMenu(self.label) 
            # self.actionA = self.contextMenu.addAction(QIcon("images/0.png"),u'| 动作A') 
            self.actionA = self.contextMenu.addAction("定位图像元素")
            self.actionB=self.contextMenu.addAction('修正定位信息')
            # 将动作与处理函数相关联 
            # 这里为了简单，将所有action与同一个处理函数相关联， 
            # 当然也可以将他们分别与不同函数关联，实现不同的功能 
            self.actionA.triggered.connect(self.actionHandler) 
            self.actionB.triggered.connect(self.updateImagePos)

    def showContextMenu(self, pos):
      
      # 菜单显示前，将它移动到鼠标点击的位置 
      self.contextMenu.exec_(QCursor.pos()) #在鼠标位置显示
      #self.contextMenu.show() 
      
    def actionHandler(self):
        self.cut=True     
        self.label.start(self)
        print("截图命令")
        
    def showcutImage(self):   
         
        cutimag= QtGui.QPixmap("/home/lixingzhou/下载/元素定位/bb.png")
        currentX=(int)(self.desktop.width()-cutimag.width())/2
        currentY=(int)(self.desktop.height()-cutimag.height())/2
        self.cutlabel.setGeometry(QtCore.QRect(currentX,currentY,cutimag.width(),cutimag.height()))
        self.cutlabel.setPixmap(cutimag)
        self.cutlabel.show()
    def showPositonArea(self):
        self.cutlabel.hide()
        simagename='/home/lixingzhou/下载/元素定位/aa.png'
        img = cv2.imread(simagename)

        height, width, bytesPerComponent = img.shape

        bytesPerLine = 3 * width

        cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)

        QImg = QImage(img.data, width, height, bytesPerLine,QImage.Format_RGB888)

        cutimag = QPixmap.fromImage(QImg)                   
        self.showarealabel.setGeometry(cutimag.rect())
        self.showarealabel.setPixmap(cutimag)
        iscurrentscreen=False    
        if iscurrentscreen:
            self.window_capture(simagename)

        po=dict(spath=simagename,dpath=r'/home/lixingzhou/下载/元素定位/bb.png')
        pos=pictureElementPosigioning.getPositionBylocationmap(po)
        print(pos)
    
        if pos is not None:
            circle_center_pos = pos['result']
            myrectangle=pos['rectangle']
            self.showarealabel.updatepositionarea(myrectangle)
        self.showarealabel.show()


    def updateImagePos(self,event):
        print("修正结束")
        print(event)        
            
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
    